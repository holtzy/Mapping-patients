p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
# library
library(tidyverse)
# Create dataset
data <- data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
value=sample( seq(10,100), 60, replace=T)
)
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 3
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
#annotate("text", x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
ggsave(p, file="~/Desktop/test.png")
# library
library(tidyverse)
library(viridis)
# Create dataset
data <- data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
value1=sample( seq(10,100), 60, replace=T),
value2=sample( seq(10,100), 60, replace=T),
value3=sample( seq(10,100), 60, replace=T)
)
# Transform data in a tidy format (long format)
data <- data %>% gather(key = "observation", value="value", -c(1,2))
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 2
nObsType <- nlevels(as.factor(data$observation))
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group)*nObsType, ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar*nObsType )
data <- rbind(data, to_add)
data <- data %>% arrange(group, individual)
data$id <- rep( seq(1, nrow(data)/nObsType) , each=nObsType)
# Get the name and the y position of each label
label_data <- data %>% group_by(id, individual) %>% summarize(tot=sum(value))
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
p <- ggplot(data) +
# Add the stacked bar
geom_bar(aes(x=as.factor(id), y=value, fill=observation), stat="identity", alpha=0.5) +
scale_fill_viridis(discrete=TRUE) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 0, xend = start, yend = 0), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 50, xend = start, yend = 50), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 100, xend = start, yend = 100), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 150, xend = start, yend = 150), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 200, xend = start, yend = 200), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),5), y = c(0, 50, 100, 150, 200), label = c("0", "50", "100", "150", "200") , color="grey", size=6 , angle=0, fontface="bold", hjust=1) +
ylim(-150,max(label_data$tot, na.rm=T)) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
# Add labels on top of each bar
geom_text(data=label_data, aes(x=id, y=tot+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
# library
library(tidyverse)
library(viridis)
# Create dataset
data <- data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
value1=sample( seq(10,100), 60, replace=T),
value2=sample( seq(10,100), 60, replace=T),
value3=sample( seq(10,100), 60, replace=T)
)
# Transform data in a tidy format (long format)
data <- data %>% gather(key = "observation", value="value", -c(1,2))
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 2
nObsType <- nlevels(as.factor(data$observation))
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group)*nObsType, ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar*nObsType )
data <- rbind(data, to_add)
data <- data %>% arrange(group, individual)
data$id <- rep( seq(1, nrow(data)/nObsType) , each=nObsType)
# Get the name and the y position of each label
label_data <- data %>% group_by(id, individual) %>% summarize(tot=sum(value))
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
p <- ggplot(data) +
# Add the stacked bar
geom_bar(aes(x=as.factor(id), y=value, fill=observation), stat="identity", alpha=0.5) +
scale_fill_viridis(discrete=TRUE) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 0, xend = start, yend = 0), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 50, xend = start, yend = 50), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 100, xend = start, yend = 100), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 150, xend = start, yend = 150), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 200, xend = start, yend = 200), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
ggplot2::annotate("text", x = rep(max(data$id),5), y = c(0, 50, 100, 150, 200), label = c("0", "50", "100", "150", "200") , color="grey", size=6 , angle=0, fontface="bold", hjust=1) +
ylim(-150,max(label_data$tot, na.rm=T)) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
# Add labels on top of each bar
geom_text(data=label_data, aes(x=id, y=tot+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
ggsave(p, file="~/Desktop/test.png")
# library
library(tidyverse)
library(viridis)
# Create dataset
data <- data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
value1=sample( seq(10,100), 60, replace=T),
value2=sample( seq(10,100), 60, replace=T),
value3=sample( seq(10,100), 60, replace=T)
)
# Transform data in a tidy format (long format)
data <- data %>% gather(key = "observation", value="value", -c(1,2))
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 2
nObsType <- nlevels(as.factor(data$observation))
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group)*nObsType, ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar*nObsType )
data <- rbind(data, to_add)
data <- data %>% arrange(group, individual)
data$id <- rep( seq(1, nrow(data)/nObsType) , each=nObsType)
# Get the name and the y position of each label
label_data <- data %>% group_by(id, individual) %>% summarize(tot=sum(value))
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
p <- ggplot(data) +
# Add the stacked bar
geom_bar(aes(x=as.factor(id), y=value, fill=observation), stat="identity", alpha=0.5) +
scale_fill_viridis(discrete=TRUE) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 0, xend = start, yend = 0), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 50, xend = start, yend = 50), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 100, xend = start, yend = 100), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 150, xend = start, yend = 150), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 200, xend = start, yend = 200), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
ggplot2::annotate("text", x = rep(max(data$id),5), y = c(0, 50, 100, 150, 200), label = c("0", "50", "100", "150", "200") , color="grey", size=6 , angle=0, fontface="bold", hjust=1) +
ylim(-150,max(label_data$tot, na.rm=T)) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
# Add labels on top of each bar
geom_text(data=label_data, aes(x=id, y=tot+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
ggsave(p, file="~/Desktop/test.png", width="800px", height="800px")
ggsave
ggsave(p, file="~/Desktop/test.png", width="800px", height="800px")
ggsave(p, file="~/Desktop/test.png", width=800, height=800)
ggsave(p, file="~/Desktop/test.png", width=10, height=10)
# Libraries necessary:
suppressWarnings(library(dplyr)) # data manipulation
suppressWarnings(library(lubridate)) # data manipulation
suppressWarnings(library(readxl)) # data manipulation
# Load + build complete address + select interesting fields
demog <- read_excel("../DATA/demog.xlsx") %>%
mutate(address=paste( `Address - Thoroughfare (i.e. Street address)`, `Address - Locality (i.e. City)`, `Address - Postal code`, `Address - Administrative area (i.e. State / Province)`)) %>%
dplyr::select( `Study ID`, `Date of Birth`, `Date of Death`, Gender, `Registration Date`, `Living Status`, address)
# Rename columns
colnames(demog) <- c("id", "birthDate", "deathDate", "gender", "registrationDate", "livingStatus", "address")
# Convert to date format
demog$registrationDate <- gsub(" UTC","",demog$registrationDate) %>% ymd()
demog$birthDate <- demog$birthDate %>% gsub("^[^, ]*, ","", .) %>% gsub(" ","-",.) %>% gsub(",","",.) %>% mdy()
demog
# Load data + select helpful columns
primary <- read_excel("../DATA/primary.xlsx") %>%
dplyr::select( `Study ID`, `First Visit Date`, `MND Family History`, `MND Type`, `ALSFRS Calc`, `Date of Onset of MND ALS Symptoms`, `Side of Body`, `Date of Diagnosis` )
# Rename columns
colnames(primary) <- c("id", "firstVisitDate", "familyHistory", "type", "alsfrs", "onsetDate", "side", "diagnosisDate")
# Convert to date format. NOTE -> Some date are lost because of weird formats.
primary$firstVisitDate <- primary$firstVisitDate %>% gsub(" UTC","",.) %>% ymd()
primary$onsetDate <- as.Date(as.numeric(primary$onsetDate), origin = "1899-12-30")
primary$diagnosisDate <- as.Date(as.numeric(primary$diagnosisDate), origin = "1899-12-30")
# Column type needs to be transformed:
primary <- primary %>%
mutate(type = case_when(
type == "Bulbar" ~ "Bulbar",
type == "Unclassified" ~ "Unclassified",
type == "LMN_predominant" ~ "Lower",
type == "UMN_predominant" ~ "Upper",
type == "Classic_ALS" ~ "Classic",
TRUE ~ "Other"
)
)
# Column side needs to be transformed:
primary <- primary %>%
mutate(side = case_when(
side == "RHS" ~ "Right",
side == "LHS" ~ "Left",
side == "LHS, RHS" ~ "Both",
TRUE ~ "Unknown"
)
)
primary
output
summary(primary$alsfrs)
head(output)
output %>%
mutate(ageAtDiagnosis = diagnosisDate - birthDate)
40 ans =
40*365
40 ans =
50*365
40 ans =
60*365
output %>%
mutate(ageAtDiagnosis = diagnosisDate - birthDate) %>%
mutate(ageAtDiagnosis = case_when(
ageAtDiagnosis < 14600 ~ "<40",
ageAtDiagnosis >= 14600 & ageAtDiagnosis < 18250 ~ "40-50",
ageAtDiagnosis >= 18250 & ageAtDiagnosis < 21900 ~ "50-60",
ageAtDiagnosis >= 21900 ~ ">60",
TRUE ~ "Unknown"
)
)
table(output$ageAtDiagnosis)
output$ageAtDiagnosis
output <- output %>%
mutate(ageAtDiagnosis = diagnosisDate - birthDate) %>%
mutate(ageAtDiagnosis = case_when(
ageAtDiagnosis < 14600 ~ "<40",
ageAtDiagnosis >= 14600 & ageAtDiagnosis < 18250 ~ "40-50",
ageAtDiagnosis >= 18250 & ageAtDiagnosis < 21900 ~ "50-60",
ageAtDiagnosis >= 21900 ~ ">60",
TRUE ~ "Unknown"
)
)
table(output$ageAtDiagnosis)
# --------------
# Data Wrangling
# --------------
# INPUT
#     - DEMOG -> A list of adresses to geocode
#     - PRIMARY VISIT -> one row per patient, information of their first visit
#     - SUBSEQUENT VISIT -> several rows per patient, information of all their subsequent visit
# OUTPUT
#     - One file that merges the information of the 3 inputs
# setwd("~/Desktop/Mapping-patients/PIPELINE")
# Libraries necessary:
suppressWarnings(library(dplyr)) # data manipulation
suppressWarnings(library(lubridate)) # data manipulation
suppressWarnings(library(readxl)) # data manipulation
# ----------
# Load AND clean demographic data
# ----------
# Load + build complete address + select interesting fields
demog <- read_excel("../DATA/demog.xlsx") %>%
mutate(address=paste( `Address - Thoroughfare (i.e. Street address)`, `Address - Locality (i.e. City)`, `Address - Postal code`, `Address - Administrative area (i.e. State / Province)`)) %>%
dplyr::select( `Study ID`, `Date of Birth`, `Date of Death`, Gender, `Registration Date`, `Living Status`, address)
# Rename columns
colnames(demog) <- c("id", "birthDate", "deathDate", "gender", "registrationDate", "livingStatus", "address")
# Convert to date format
demog$registrationDate <- gsub(" UTC","",demog$registrationDate) %>% ymd()
demog$birthDate <- demog$birthDate %>% gsub("^[^, ]*, ","", .) %>% gsub(" ","-",.) %>% gsub(",","",.) %>% mdy()
# ----------
# Load AND clean Primary Visit
# ----------
# Load data + select helpful columns
primary <- read_excel("../DATA/primary.xlsx") %>%
dplyr::select( `Study ID`, `First Visit Date`, `MND Family History`, `MND Type`, `ALSFRS Calc`, `Date of Onset of MND ALS Symptoms`, `Side of Body`, `Date of Diagnosis` )
# Rename columns
colnames(primary) <- c("id", "firstVisitDate", "familyHistory", "type", "alsfrs", "onsetDate", "side", "diagnosisDate")
# Convert to date format. NOTE -> Some date are lost because of weird formats.
primary$firstVisitDate <- primary$firstVisitDate %>% gsub(" UTC","",.) %>% ymd()
primary$onsetDate <- as.Date(as.numeric(primary$onsetDate), origin = "1899-12-30")
primary$diagnosisDate <- as.Date(as.numeric(primary$diagnosisDate), origin = "1899-12-30")
# Column type needs to be transformed:
primary <- primary %>%
mutate(type = case_when(
type == "Bulbar" ~ "Bulbar",
type == "Unclassified" ~ "Unclassified",
type == "LMN_predominant" ~ "Lower",
type == "UMN_predominant" ~ "Upper",
type == "Classic_ALS" ~ "Classic",
TRUE ~ "Other"
)
)
# Column side needs to be transformed:
primary <- primary %>%
mutate(side = case_when(
side == "RHS" ~ "Right",
side == "LHS" ~ "Left",
side == "LHS, RHS" ~ "Both",
TRUE ~ "Unknown"
)
)
# ----------
# MERGE files together
# ----------
output <- merge(demog , primary, by.x="id", by.y="id", all.y=FALSE)
# ----------
# ADD VARIABLES?
# ----------
# What is the age at diagnosis?
output <- output %>%
mutate(ageAtDiagnosis = diagnosisDate - birthDate) %>%
mutate(ageAtDiagnosis = case_when(
ageAtDiagnosis < 14600 ~ "<40",
ageAtDiagnosis >= 14600 & ageAtDiagnosis < 18250 ~ "40-50",
ageAtDiagnosis >= 18250 & ageAtDiagnosis < 21900 ~ "50-60",
ageAtDiagnosis >= 21900 ~ ">60",
TRUE ~ "Unknown"
)
)
# ----------
# Save data in a .RData object
# ----------
save(output, file = "../DATA/mergedData.Rdata")
# --------------
# Geocoding adresses
# --------------
# This script takes 2 inputs:
#     - All patient information with their address
#     - A list of adresses that have already been geocoded
# It geocodes adresses that haven't been geocoded yet using the opencage library
# setwd("~/Desktop/Mapping-patients/PIPELINE")
# Libraries necessary:
suppressWarnings(library(dplyr)) # data manipulation
suppressWarnings(library(opencage)) # geocoding
suppressWarnings(library(jsonlite)) # json output
# Load the list of adresses to geocode
load("../DATA/mergedData.Rdata")
input <- output
cat(paste(nrow(input), "addresses in the input file", "\n"))
# Load the list of adresses we already have geocoded
load("../DATA/adress_with_gps.RData")
cat(paste(nrow(data), "addresses are already geolocalized. But perhaps not the same as the one we need", "\n"))
# List of adresses to geocode?
toGeocode <- input %>%
filter(! address %in% data$address)
cat(paste(nrow(toGeocode), "addresses still need to be geolocalized", "\n"))
toGeocode = toGeocode %>% head(100)
# A function that return the GPS coordinates of an adress:
geocode <- function(address){
address <- as.character(address)
res <- opencage_forward(placename = address, key="aa789601867b48d6a0625233e786d7e1", limit=1)$res %>%
dplyr::select(geometry.lat, geometry.lng)
output <- data.frame(address=address, lat=res$geometry.lat, lon=res$geometry.lng)
return(output)
}
# Note: threshold of 2500 per day
# Note: try it on an adress: geocode("1/115 Indooroopilly ParadeTaringa QLD 4068Australia")
# Use this function to geocode all the necessary adresses:
addresses <- as.vector(toGeocode$address)
i <- 0
dataWithGeo <- suppressWarnings(
lapply(addresses, function(address) {
i <<- i+1 ;
print(paste("geocoding: ",i, " / ", length(addresses) )) ;
return( geocode(address) )
})  %>%
bind_rows() %>%
data.frame()
)
cat(paste(nrow(dataWithGeo), "addresses have successfully been geolocalized", "\n"))
# Add these new adresses to the original file that contains GPS coordinates
data <- rbind(data, dataWithGeo)
save(data, file="../DATA/adress_with_gps.RData")
cat("\nGeocoding part of the pipeline has been successfull")
# Now merge all the geolocated adresses we have with the initial file
completeInfo <- merge(input, data, by.x="address", by.y="address", all.x=FALSE, all.y=FALSE)
# Now save that in a Json format for the javascript Map
completeInfo <- completeInfo %>% filter(!is.na(lat))
tosave <- paste("marker = ", toJSON(completeInfo))
fileConn<-file("../DATA/data.js")
writeLines(tosave, fileConn)
close(fileConn)
completeInfo$ageAtDiagnosis
completeInfo
